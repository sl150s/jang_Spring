<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">



	<!-- JNDI 데이터 소스 객체 얻어오는 설정 Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 
		된다. <Resource name="jdbc/myoracle" auth="Container" type="javax.sql.DataSource" 
		driverClassName="oracle.jdbc.OracleDriver" url="jdbc:oracle:thin:@127.0.0.1:1521:xe" 
		username="scott" password="tiger" maxTotal="20" maxIdle="10" maxWaitMillis="-1"/> -->
	<beans:bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName"
			value="java:comp/env/jdbc/myoracle" />
	</beans:bean>

	<!-- 위는 아래의 코드와 같다 dataSource = new JndiObjectFactoryBean(); dataSource.setJndiName("java:comp/env/jdbc/myoracle"); -->



	<!-- SqlSessionFactory 객체 Configuration.xml 문서가 어디에 있는지 알려야 한다. value에서 
		classpath: 은 src/resources 폴더를 가리킨다. 따라서, classpath:Configuration.xml 은 src/main/resources 
		폴더 안에 존재 해야한다. -->
	<beans:bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" /> <!-- ref는 참조값 -->
		<beans:property name="configLocation"
			value="classpath:Configuration.xml" /> <!-- value는 int,spring.. 등등을 넣을때 사용 -->
	</beans:bean>
	<!-- sessionFactory=new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); 
		sessionFactory.setConfigLocation("classpath:com/gura/xxx"); -->


	<!-- SqlSession 인터페이스를 구현한 SqlSessionTemplate(SqlSession) 객체 Dao 가 의존하는 
		객체 -->
	<beans:bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory"
			ref="sessionFactory" />
	</beans:bean>


	<!-- <beans:bean
		class="com.gura.spring04.member.dao.MemberDaoImpl">

	</beans:bean> -->



	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan
		base-package="com.gura.spring04" />
		
	<!-- 
		인터셉터를 동작하기 위해서는 인터셉터도 bean 되어야하고 
		어떤 요청에서 인터셉터가 동작할지 url을 맵핑해야 한다.
	-->
	<beans:bean id="logininterceptor" class="com.gura.spring04.interceptor.LoginInterceptor"/>

	<interceptors>
		<interceptor>
			<mapping path="/users/*"/>
			<exclude-mapping path="/users/signup_form"/>
			<exclude-mapping path="/users/signup"/>
			<exclude-mapping path="/users/loginform"/>
			<exclude-mapping path="/users/login"/>
			<beans:ref bean="logininterceptor"/>
		</interceptor>
	</interceptors>

</beans:beans>
