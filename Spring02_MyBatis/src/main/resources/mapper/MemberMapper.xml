<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">


	<update id="update" parameterType="com.gura.spring02.member.dto.MemberDto">
		UPDATE member
		SET name=#{name},addr=#{addr}
		WHERE num=#{num}
	</update>
	<!-- 
		parameterType과  resultType이 둘다 존재 하는 이유
		파라미터를 전달( parameterType)받고, 객체 안에 select된 row를 담기 위해서(resultType)
		
	 -->
	<select id="getData" parameterType="int" resultType="com.gura.spring02.member.dto.MemberDto">
		SELECT num, name, addr
		FROM member
		WHERE num=#{num}
	</select>
	
	<!-- 
		parameterType이 숫자나 문자열이면 값이 하나이기 때문에 
		#{여기에 아무 문자열이나 넣어도 된다.}
		#{num}
		#{gura}
		#{xxx}
	 -->
	<delete id="delete" parameterType="int">
		DELETE FROM member
		WHERE num = #{num}
	</delete>
	
	<!-- 
		parameterType이 dto인 경우에
		값을 바인딩하는 방법은 #{dto의 필드명}과 같은 형식으로 바인딩하면 된다. 
		#{name} 은 dto의 name이라는 필드에 있는 값을 해당 위치에 바인딩하라는 의미이다.  
		#{addr} 은 dto의 addr이라는 필드에 있는 값을 해당 위치에 바인딩하라는 의미이다. 
		즉,  필드명과 일치 시켜야 동작을 한다. 
		#{ }기호는 MyBatis가 해석하는 특별한 기호이다. 
	-->
	<insert id="insert" parameterType="com.gura.spring02.member.dto.MemberDto">
		INSERT INTO member
		(num, name,addr)
		VALUES (member_seq.NEXTVAL,#{name},#{addr}) 
	</insert>
	<!-- 
		여기서 resultType은 select 된 row를 어떤 객체에 담을지를 결정하는 것이다.  
		dto로 설정했다면 SELECT num, name, addr 의 칼럼명과 
		dto의 필드명이 반드시 일치해야 정상동작을 한다.
	-->
	<select id="getList" resultType="com.gura.spring02.member.dto.MemberDto">
		SELECT num, name, addr
		FROM member
		ORDER BY num ASC
	</select>
</mapper>



